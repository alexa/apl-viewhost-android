/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 */

/*
 * AUTOGENERATED FILE. DO NOT MODIFY!
 * This file is autogenerated by enumgen.
 */

package com.amazon.apl.enums;

import android.util.SparseArray;

public enum RootProperty implements APLEnum {

    /// All new enum values should be added *after* this
    kRootPropertySetBegin(0),
    /// Agent name
    kAgentName(1),
    /// Agent version
    kAgentVersion(2),
    /// If the OpenURL command is supported
    kAllowOpenUrl(3),
    /// If dialog (and speech) related commands are supported
    kDisallowDialog(4),
    /// If edit text component supported
    kDisallowEditText(5),
    /// If video is supported
    kDisallowVideo(6),
    /// Quality of animation expected. If set to kAnimationQualityNone, all animation commands are disabled (include onMount).
    kAnimationQuality(7),
    /// Default idle timeout
    kDefaultIdleTimeout(8),
    /// APL version of the specification that is supported by this application. This value will be reported in the data-binding.
    kReportedVersion(9),
    /// Sets whether the "type" field of an APL document should be enforced
    kEnforceTypeField(10),
    /// Default font color. This is the fallback color for all themes
    kDefaultFontColor(11),
    /// Default highlight color. This is the fallback color for all themes
    kDefaultHighlightColor(12),
    /// Default font family. This is usually locale-based
    kDefaultFontFamily(13),
    ///  Enable or disable tracking of resource, style, and component provenance
    kTrackProvenance(14),
    /// Set pager layout cache in both directions
    kPagerChildCache(15),
    /// Set sequence layout cache in both directions
    kSequenceChildCache(16),
    /// Current UTC time in milliseconds since the epoch
    kUTCTime(17),
    /// For example to select the japanese characters of the "Noto Sans CJK" font family set this to "ja-JP"
    kLang(18),
    /// The document layout direction. Can be "RTL" or "LTR". Default is "LTR" (left to right)
    kLayoutDirection(19),
    /// Local time zone adjustment in milliseconds
    kLocalTimeAdjustment(20),
    /// Double press timeout
    kDoublePressTimeout(21),
    /// Long press timeout
    kLongPressTimeout(22),
    /// Duration to show the "pressed" state of a component when programmatically invoked
    kPressedDuration(23),
    /// This is the maximum amount of time that can pass before the system has to commit to this being a touch event instead of a scroll event.
    kTapOrScrollTimeout(24),
    /// SwipeAway gesture fulfill distance threshold in percents
    kSwipeAwayFulfillDistancePercentageThreshold(25),
    /// SwipeAway gesture animation easing
    kSwipeAwayAnimationEasing(26),
    /// SwipeAway (and any related gesture) gesture swipe speed threshold
    kSwipeVelocityThreshold(27),
    /// Maximum SwipeAway (and any related gesture) gesture swipe speed
    kSwipeMaxVelocity(28),
    /// SwipeAway gesture tolerance in degrees when determining whether a swipe was triggered
    kSwipeAngleTolerance(29),
    /// Default animation duration, in ms, for SwipeAway animations
    kDefaultSwipeAnimationDuration(30),
    /// Max animation duration, in ms, for SwipeAway animations
    kMaxSwipeAnimationDuration(31),
    /// Fling velocity threshold
    kMinimumFlingVelocity(32),
    /// Tick handler update limit in ms
    kTickHandlerUpdateLimit(33),
    /// Requested font scaling factor for the document
    kFontScale(34),
    /// Screen display mode for accessibility (normal or high-contrast)
    kScreenMode(35),
    /// Inform that a screen reader is turned on
    kScreenReader(36),
    /// Pointer inactivity timeout. Pointer considered stale after pointer was not updated for this time.
    kPointerInactivityTimeout(37),
    /// Fling gestures velocity limit
    kMaximumFlingVelocity(38),
    /// Maximum velocity to be considered a tap gesture (dp/second)
    kMaximumTapVelocity(39),
    /// Gesture distance threshold in dp. Initial movement below this threshold does not trigger gestures.
    kPointerSlopThreshold(40),
    /// Scroll commands duration
    kScrollCommandDuration(41),
    /// Scroll into view on focus duration
    kScrollOnFocusDuration(42),
    /// Scroll snap duration
    kScrollSnapDuration(43),
    /// Default pager page switch animation duration
    kDefaultPagerAnimationDuration(44),
    /// Default pager animation easing
    kDefaultPagerAnimationEasing(45),
    /// Fling gesture tolerance in degrees when determining whether a swipe was triggered in vertical direction
    kScrollAngleSlopeVertical(46),
    /// Fling gesture tolerance in degrees when determining whether a swipe was triggered in horizontal direction
    kScrollAngleSlopeHorizontal(47),
    /// Scrolling velocity limit easing to apply based on scroll distance in vertical direction
    kScrollFlingVelocityLimitEasingVertical(48),
    /// Scrolling velocity limit easing to apply based on scroll distance in horizontal direction
    kScrollFlingVelocityLimitEasingHorizontal(49),
    /// UnidirectionalEasingScroller scrolling easing for velocity defined (touch produced) scrolling
    kUEScrollerVelocityEasing(50),
    /// UnidirectionalEasingScroller scrolling easing for duration defined (programmatic) scrolling
    kUEScrollerDurationEasing(51),
    /// UnidirectionalEasingScroller maximum scrolling animation duration
    kUEScrollerMaxDuration(52),
    /// UnidirectionalEasingScroller deceleration
    kUEScrollerDeceleration(53),
    /// SendEvent additional flags
    kSendEventAdditionalFlags(54),
    /// Limit of cache records for TextMeasurements
    kTextMeasurementCacheLimit(55),
    /// Initial display state of the document, used by core prior to any display state updates
    kInitialDisplayState(56),
    /// All new enum values should be added *before* this
    kRootPropertySetEnd(57);

    private static SparseArray<RootProperty> values = null;

    static {
        RootProperty.values = new SparseArray<>();
        RootProperty[] values = RootProperty.values();
        for (RootProperty value : values) {
            RootProperty.values.put(value.getIndex(), value);
        }
    }

    public static RootProperty valueOf(int idx) {
        return RootProperty.values.get(idx);
    }

    private final int index;

    RootProperty (int index) {
        this.index = index;
    }

    @Override
    public int getIndex() { return this.index; }
}
