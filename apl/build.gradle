/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */


import com.amazon.apl.android.EnumGenerator
import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: com.amazon.apl.android.APLPlugin

jacoco {
    toolVersion = '0.8.8'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

tasks.withType(Test) {
    testLogging {
        events "standardOut", "started", "passed", "skipped", "failed"
    }

    filter {
        /**
         * This filter can be used when you want to debug some failed unit test in local test run
         * if you wish to run locally, you should use ./gradlew :apl:testDebugUnitTest in command line
         * For example, uncomment the line below for running tests in a specific class
         */
        //includeTestsMatching "com.amazon.apl.android.font.TypefaceResolverTest"
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['test']) {
    def mainSrc = "$project.projectDir/src/main/java"

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', '**/AutoValue_*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/release/", excludes: fileFilter)

    sourceDirectories.from(files([mainSrc]))
    classDirectories.from(files(debugTree))

    executionData.from(fileTree(dir: "$buildDir", includes: [
            "jacoco/*.exec",
            "outputs/code_coverage/debugAndroidTest/connected/*coverage.ec"
    ]))
    reports {
        xml.required = true
        html.required = true
    }
}

/**
 * Task to generate coverage report for automationapp after
 * APLComplianceTests have completed.
 */
task jacocoAutomationTestReport(type: JacocoReport) {
    def emulator_proc = "adb pull /data/user/0/com.amazon.apl.automation/cache/coverage.exec $buildDir/outputs/coverage.exec".execute()
    doFirst {
        emulator_proc.waitForProcessOutput(System.out, System.err)
    }

    def mainSrc = "$project.projectDir/src/main/java"

    def fileFilter= [
         // Exclude code generated by Android project
            '**/R.class',
            '**/R$*.class',
            '**/R.styleable',
            '**/R$*.styleable',
            '**/Manifest.class',
            '**/Manifest*.class',
            '**/BuildConfig.class',
            '**/AutoValue_*.*',
            '**/*Test*.*',

            // Exclude Android and Androidx Support libraries
            '**/androidx/**',
            '**/com/android/**',
            '**com/google/**'
    ]

    def debugFilter = fileTree(dir: "$project.buildDir/intermediates/javac/debug/",
            excludes: fileFilter)

    sourceDirectories.from(files([mainSrc]))
    classDirectories.from(files([debugFilter]))
    executionData.from(fileTree(dir: "$buildDir", includes: [
            "jacoco/*.exec",
            "outputs/coverage.exec"
    ]))
    reports {
        xml.required = true
        html.required = true
    }
}

ext {
    cmakeProjectPath = projectDir.absolutePath
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        cmakeProjectPath = cmakeProjectPath.replace('\\', '/')
    }
    aplAndroidCmakeArgs = "-DCMAKE_VERBOSE_MAKEFILE=ON"
}

android {
    namespace "com.amazon.apl.android"
    compileSdk 34
    ndkVersion "23.0.7599858"
    buildToolsVersion = "34.0.0"

    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        renderscriptTargetApi 22
        externalNativeBuild {
            cmake {
                // Sets optional flags for the C++ compiler.
                cppFlags "-std=c++11", "-fno-rtti", "-fno-exceptions"
                // Build the APL Core JNI library (excludes all other targets)
                targets "apl-jni"
                // Enable APL Core JNI build, and be verbose.
                arguments aplAndroidCmakeArgs
            }
        }
    }
    sourceSets {
        // Encapsulates configurations for the main source set.
        main {
            // Changes the directory for Java sources. The default directory is
            // 'src/main/java'.
            java.srcDirs = ['src/main/java']
        }
    }
    publishing {
        multipleVariants {
            allVariants()
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        releaseWithSceneGraph {
            buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}-core\"")
            buildConfigField 'boolean', 'DEBUG_LOGGING', 'false'
            matchingFallbacks = ['release']
            externalNativeBuild {
                cmake {
                    arguments aplAndroidCmakeArgs, "-DREMOVE_PRIVATE_EXPORTS=ON", "-DINCLUDE_ALEXAEXT=ON", "-DVERSION_NAME=${project.version}", "-DSCENE_GRAPH=ON"
                }
            }
        }
        release {
//            minifyEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}-core\"")
            buildConfigField 'boolean', 'DEBUG_LOGGING', 'false'
            externalNativeBuild {
                cmake {
                    arguments aplAndroidCmakeArgs, "-DREMOVE_PRIVATE_EXPORTS=OFF", "-DINCLUDE_ALEXAEXT=ON", "-DVERSION_NAME=${defaultConfig.versionName}"
                }
            }

        }
        debug {
            testCoverageEnabled true
            debuggable true
            buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}-core\"")
            buildConfigField 'boolean', 'DEBUG_LOGGING', 'true'
            externalNativeBuild {
                cmake {
                    arguments aplAndroidCmakeArgs, "-DDEBUG_MEMORY_USE=ON", "-DINCLUDE_ALEXAEXT=ON", "-DVERSION_NAME=${project.version}"
                }
            }
        }
        releaseMinSized {
            buildConfigField("long", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String", "VERSION_NAME", "\"${defaultConfig.versionName}-core\"")
            buildConfigField 'boolean', 'DEBUG_LOGGING', 'false'
            matchingFallbacks = ['release']
            externalNativeBuild {
                cmake {
                    arguments aplAndroidCmakeArgs, "-DREMOVE_PRIVATE_EXPORTS=ON", "-DINCLUDE_ALEXAEXT=ON", "-DVERSION_NAME=${project.version}"
                }
            }
        }
    }
    // Temporary fix until alpha10 - "More than one file was found with OS independent path 'META-INF/proguard/androidx-annotations.pro"
    packagingOptions {
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }

    externalNativeBuild {
        cmake {
            version "3.18.1"

            // Tells Gradle to find the root CMake APL build script. path is relative to
            // the directory containing the module's build.gradle file. Gradle requires this
            // build script to designate a CMake project as a build dependency and
            // pull native sources into the Android project.
            path "CMakeLists.txt"
        }
    }
    lintOptions {
        // If set to true, turns off analysis progress reporting by lint.
        quiet false
        // if set to true (default), stops the build if errors are found.
        abortOnError true
        // if true, only report errors.
        ignoreWarnings false
        // flag code marked for unreleasable
        fatal 'StopShip'
        disable 'LongLogTag'
    }
    buildFeatures {
        buildConfig true
        prefab true
    }
    testOptions {
        animationsDisabled true

        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            systemProperty "java.library.path", String.join(":",
                    "${cmakeProjectPath}/.cxx/cmake/debug/host/",
                    "${cmakeProjectPath}/../discovery/.cxx/cmake/debug/host/",
                    "${cmakeProjectPath}/../common/.cxx/cmake/debug/host/"
            )
        }
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.30'
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.annotation:annotation:1.4.0'
    implementation 'androidx.core:core:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation 'org.java-websocket:Java-WebSocket:1.5.2'
    compileOnly 'com.amazon.apl.android:coreengine:latest.integration'
    compileOnly project(':alexaextjni')
    implementation project(':common')
    implementation(project(':discovery')) { transitive = false }
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.8.1'
    testImplementation 'org.robolectric:shadows-httpclient:4.2'
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'org.mockito:mockito-core:4.7.0'
    testImplementation 'androidx.test:rules:1.4.0'
    testImplementation 'org.json:json:20210307'
    androidTestImplementation 'org.mockito:mockito-core:3.12.4'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.annotation:annotation:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker:2.28.3'
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.28.3'
    androidTestImplementation project(":commonTest")
    androidTestImplementation 'com.squareup.leakcanary:leakcanary-android-instrumentation:2.9.1'
    androidTestImplementation 'com.squareup.leakcanary:leakcanary-object-watcher-android:2.9.1'
    androidTestUtil 'androidx.test:orchestrator:1.1.1'
    api "com.google.auto.value:auto-value-annotations:1.7"
    api 'com.google.guava:guava:27.0.1-jre'
    annotationProcessor "com.google.auto.value:auto-value:1.7"
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
}

tasks.whenTaskAdded { theTask ->
    if (theTask.name.startsWith("test")) {
        theTask.outputs.upToDateWhen { false }
    }
}

project.afterEvaluate {
    // Dump configuration settings
    println "APL CMake Args: " + aplAndroidCmakeArgs
    println "Android SDK Directory: " + android.sdkDirectory.path
    println "Android NDK Directory: " + android.ndkDirectory.path

    tasks.test.finalizedBy(jacocoTestReport)
}

publishing {
    publications {
        release(MavenPublication) {
            pom {
                description = 'Commits: APLViewhostAndroid=' + System.env.CODEBUILD_RESOLVED_SOURCE_VERSION +
                        ',APLCoreEngine=' + System.env.CORE_SOURCE_VERSION
            }
            afterEvaluate {
                from components.default
            }
        }

    }
}

tasks.build.dependsOn(assembleAndroidTest)

apply plugin: 'checkstyle'

checkstyle {
    configDirectory = file("$project.projectDir/checkstyle")
    ignoreFailures = false
}

task checkstyle(type: Checkstyle, group: 'verification') {
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    classpath = files()
}

task release(dependsOn: ['build', 'publish']) {
    doLast {
        copy {
            from 'build/outputs/aar'
            into '../build/apl'
            rename 'apl-releaseMinSized.aar', 'aplMinSized-release.aar'
        }

        copy {
            from 'build/reports/jacoco/jacocoTestReport'
            into '../build/apl/reports/'
            rename 'jacocoTestReport.xml', 'coverage.xml'
        }

        copy {
            from 'build/outputs/apk/androidTest/debug'
            into '../build/apl/androidTest'
        }

        copy {
            from 'build/intermediates/merged_native_libs/releaseMinSized/out/lib/'
            into '../build/apl/symbols'
        }
    }
}

tasks.register('cleanHostBuild') {
    doLast {
        delete project.projectDir.path + '/.cxx/cmake/debug/host/'
    }
}

tasks.clean.dependsOn(cleanHostBuild)

// ignore unit tests for scenegraph
tasks.whenTaskAdded {
    task ->
        if(task.name.contains("test") && task.name.contains("SceneGraph")) {
            task.enabled = false
        }
}

task generateEnums(type: EnumGenerator) {
    importedEnums   "AnimationQuality",
            "AudioPlayerEventType",
            "AudioTrack",
            "BlendMode",
            "ComponentType",
            "ContainerDirection",
            "DimensionType",
            "Display",
            "DisplayState",
            "EventAudioTrack",
            "EventControlMediaCommand",
            "EventDirection",
            "EventHighlightMode",
            "EventMediaType",
            "EventProperty",
            "EventReason",
            "EventScrollAlign",
            "EventType",
            "ExtensionComponentResourceState",
            "FilterProperty",
            "FilterType",
            "FlexboxAlign",
            "FlexboxJustifyContent",
            "FocusDirection",
            "FontStyle",
            "GradientProperty",
            "GradientSpreadMethod",
            "GradientType",
            "GradientUnits",
            "GraphicElementType",
            "GraphicFilterProperty",
            "GraphicFilterType",
            "GraphicLayoutDirection",
            "GraphicLineCap",
            "GraphicLineJoin",
            "GraphicPropertyKey",
            "GraphicScale",
            "GraphicScale",
            "GraphicTextAnchor",
            "ImageAlign",
            "ImageCount",
            "ImageScale",
            "KeyHandlerType",
            "KeyboardType",
            "LayoutDirection",
            "MediaPlayerEventType",
            "Navigation",
            "NoiseFilterKind",
            "PointerEventType",
            "PointerType",
            "Position",
            "PropertyKey",
            "Role",
            "RootProperty",
            "ScreenMode",
            "ScreenShape",
            "ScrollDirection",
            "Snap",
            "SpeechMarkType",
            "SpanAttributeName",
            "SpanType",
            "SubmitKeyType",
            "TextAlign",
            "TextAlignVertical",
            "TextTrackType",
            "TokenType",
            "TrackState",
            "UpdateType",
            "VectorGraphicAlign",
            "VectorGraphicScale",
            "VideoScale",
            "ViewportMode"
}

tasks.preBuild.dependsOn(generateEnums)